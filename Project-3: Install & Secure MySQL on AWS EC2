#Objective: Set up a secure and production-ready MySQL Database Server on an AWS EC2 instance*Launch and connect to an EC2 instance
**Steps
1️⃣1-:Launch an EC2 Instance
    AMI: Amazon Linux 2 / Ubuntu 22.04
    Security Group: Allow SSH (Port 22)+MySQL (Port 3306)     
2️⃣2-Update System Packages        sudo apt update -y && sudo apt upgrade -y
3️⃣3-install MySQL Server           sudo  apt install mysql-server -y
4️⃣4-start and Enable MySQL Service  sudo systemctl start/enable/status mysql
5️⃣5-secure the MySQL Installation    sudo mysql_secure_installation
Then follow the prompts below exactly as required 
------------------------------------------------------------------------------------
Prompt	Action	Example
Set a strong root password?	 	 
Remove anonymous users?		 
Disallow root login remotely?	 	 
Remove test database and access to it? 
Reload privilege tables now?	 	 
6-Test MySQL Login
   mysql -u root -p
   SHOW DATABASES;
   CREATE DATABASE company_db;
   SHOW DATABASES;
 Let’s create a normal user (not root)
 CREATE USER 'devuser'@'localhost' IDENTIFIED BY 'DevPass@123';
 GRANT ALL PRIVILEGES ON company_cars24_db.* TO 'devuser'@'localhost';
 FLUSH PRIVILEGES;
✅ devuser now has access only to company_db
    #Use the Database/Switch to your new DB:
run
USE company_db;
exit;
now Exit from MySQL
-------------------------------------------
 7-Allow Remote Connections (Optional for Testing Only)
⚠️ Only for learning, not for production
A-Edit MySQL config:
sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf
A-FIND (See)
bind-address = 127.0.0.1       #Change to:  bind-address = 0.0.0.0
C- Save and exit .
C- Restart MySQL:
Dsudo systemctl restart MySQL
8-Configure Firewall & Security Group
Update AWS Security Group to allow TCP 3306 only from your trusted IP.
Disable public access after testing to keep it secure
Now you can connect remotely using MySQL Workbench or DBeaver
9-From your local machine or another EC2:
   mysql -h <EC2-Public-IP> -u admin -p
10-Backup & Restore Check
mysqldump -u root -p --all-databases > all_db_backup.sql
